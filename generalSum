import numpy as np 
def sum(n, N):
    sum = 0.0
    for i in range(n, N):
        sum += (1/(i))
    return sum

def caseA1(N):
    s = sum(1, 1500)
    return s/N

def caseA2(N):
    sum_n = 0.0
    for n in range(1, N):
        sum_n += (1/n) * sum(n+1,N)
    return sum_n/N



# def inner_sum(N, n, prev_sum):
#     sum_arr = []
#     sum_arr.append(np.sum(one_x[n:N]))
#     return sum_arr
 
# def generalSum(N, max_depth):
#     print(N)
#     sum = 0.0
#     for i in range(1,1500):
#         sum

#     return np.sum(sum_arr)/N

one_x = []
for i in range(1, 1500):
    one_x.append(1/i)
print(one_x[0:5])
print(len(one_x))
print(one_x[1498])

sum_arr = []

for i in range(1,1500):
    sum_arr.append(np.sum(one_x[i:1500]))
print(len(sum_arr))
print(sum_arr[0:5])


# def fuction(N, n, max_depth, curr_depth, sum):
#     # print()
#     if curr_depth == max_depth:
#         return np.sum(one_x[curr_depth:N])
#     for x in range(n, N):
#         sum = (1/x) * fuction(N, x+1, max_depth, curr_depth+1, sum)
#     return sum


# print(fuction(1500, 1, 2, 0, 0.0))
# print(generalSum(1500, 2))

# print(sum_arr)
# inner_sum(1500, 5, 2)
# print(sum_arr)
print(caseA1(1500))
print(caseA2(1500))


def func(N, n, depth, max_depth):
    curr_sum = 0.0
    prev_sum = 1.0 
    for x in range(n, N):
        if(depth < max_depth):
            prev_sum = func(N, x+1, depth+1, max_depth)
        curr_sum += (1/x) * prev_sum
    
    # print(curr_sum)
    return curr_sum


for i in range(1, 11):
    print("Sum of depth", i, ":", (1/1500) * func(1500, 1, 1, i))  